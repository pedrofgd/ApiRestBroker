// Esse script deve:
// Contar o número de requisições com latência maior que um limite configurado
// Agrupar a contagem de requisições por nome_recurso e nome_provedor
// Enviar uma requisição POST para o Broker

// Resetar a contagem após enviar o alerta
// Avaliar enviar uma requisição POST para o Redis, para atualizar direto lá

var limit = 200
var threshold = 10

stream
    |from()
        .measurement('performance_influx')
    |groupBy('nome_recurso', 'nome_provedor')
    |stateCount(lambda: "latencia" >= limit)
        .as('consecutive_count')
    |alert()
        .id('performance_degradada')
        .message('performance_degradada')
        .details('The past {{ index .Fields "consecutive_count" }} requests had latency higher than the limit for "nome_recurso": {{ index .Tags "nome_recurso" }} and "nome_provedor": {{ index .Tags "nome_provedor" }}.')
        .crit(lambda: "consecutive_count" > threshold)
        .log('/var/log/kapacitor/alerts-latency.log')
        .post('http://host.docker.internal:5073/webhook')
            .skipSSLVerification()
